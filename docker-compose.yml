version: '3.8'

services:
  postgres:
    image: postgres:16
    container_name: liarsbar_db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: # <--- ADICIONADO
      - app-network

  redis:
    image: redis:latest
    container_name: liarsbar_redis
    restart: always
    volumes:
      - redis_data:/data
    networks: # <--- ADICIONADO
      - app-network

  backend:
    build: ./backend 
    container_name: liarsbar_backend
    restart: always
    env_file:
      - ./.env 
    volumes:
      - ./backend/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy 
      redis:
        condition: service_started
    networks:
      - app-network

  nginx:
    build: 
      context: ./frontend
    container_name: liarsbar_nginx
    restart: always
    ports:
      - "80:80"  
      - "443:443" 
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - backend
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:

networks:
  app-network: